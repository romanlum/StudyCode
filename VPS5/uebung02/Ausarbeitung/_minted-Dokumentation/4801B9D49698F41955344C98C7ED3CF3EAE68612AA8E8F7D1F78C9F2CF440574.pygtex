\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{using} \PYG{n+nn}{System}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Linq}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Threading}\PYG{p}{;}

\PYG{k}{namespace} \PYG{n+nn}{VSS.ToiletSimulation}
\PYG{p}{\PYGZob{}}
    \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
    \PYG{c+c1}{/// FIFO Queue implementation}
    \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
    \PYG{k}{public} \PYG{k}{class} \PYG{n+nc}{FifoQueue} \PYG{p}{:} \PYG{n}{Queue}\PYG{p}{,}\PYG{n}{IDisposable}
    \PYG{p}{\PYGZob{}}
        \PYG{k}{private} \PYG{k}{readonly} \PYG{n}{SemaphoreSlim} \PYG{n}{syncSemaphore}\PYG{p}{;}
        \PYG{k}{private} \PYG{k}{readonly} \PYG{n}{CancellationTokenSource} \PYG{n}{cancellationTokenSource}\PYG{p}{;}
        
        \PYG{k}{public} \PYG{n+nf}{FifoQueue}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{n}{syncSemaphore} \PYG{p}{=} \PYG{k}{new} \PYG{n}{SemaphoreSlim}\PYG{p}{(}\PYG{l+m}{0}\PYG{p}{);}
            \PYG{n}{cancellationTokenSource}\PYG{p}{=} \PYG{k}{new} \PYG{n}{CancellationTokenSource}\PYG{p}{();}
        \PYG{p}{\PYGZcb{}}

        \PYG{k}{public} \PYG{k}{override} \PYG{k}{void} \PYG{n+nf}{Enqueue}\PYG{p}{(}\PYG{n}{IJob} \PYG{n}{job}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{if} \PYG{p}{(}\PYG{n}{addingComplete}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{throw} \PYG{k}{new} \PYG{n+nf}{InvalidOperationException}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Cannot insert \PYGZdq{}} \PYG{p}{+}
                                                    \PYG{l+s}{\PYGZdq{}elements on already \PYGZdq{}} \PYG{p}{+}
                                                    \PYG{l+s}{\PYGZdq{}complete marked queue\PYGZdq{}}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}

            \PYG{k}{lock} \PYG{p}{(}\PYG{n}{LockObject}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{queue}\PYG{p}{.}\PYG{n}{Add}\PYG{p}{(}\PYG{n}{job}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}
            \PYG{n}{syncSemaphore}\PYG{p}{.}\PYG{n}{Release}\PYG{p}{();}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// fetch next job}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}job\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{override} \PYG{k+kt}{bool} \PYG{n+nf}{TryDequeue}\PYG{p}{(}\PYG{k}{out} \PYG{n}{IJob} \PYG{n}{job}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{n}{job} \PYG{p}{=} \PYG{k}{null}\PYG{p}{;}

            \PYG{k}{if} \PYG{p}{(}\PYG{n}{IsCompleted}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}}

            \PYG{k}{try}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{syncSemaphore}\PYG{p}{.}\PYG{n}{Wait}\PYG{p}{(}\PYG{n}{cancellationTokenSource}\PYG{p}{.}\PYG{n}{Token}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}
            \PYG{k}{catch} \PYG{p}{(}\PYG{n}{OperationCanceledException}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{c+c1}{//do nothing here because it is intended}
                \PYG{c+c1}{//it signals that the queue is empty and complete}
            \PYG{p}{\PYGZcb{}}
            
            \PYG{k}{if} \PYG{p}{(!}\PYG{n}{IsCompleted}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{lock} \PYG{p}{(}\PYG{n}{LockObject}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{if} \PYG{p}{(}\PYG{n}{Count} \PYG{p}{\PYGZgt{}} \PYG{l+m}{0}\PYG{p}{)}
                    \PYG{p}{\PYGZob{}}
                        \PYG{k+kt}{var} \PYG{n}{obj} \PYG{p}{=} \PYG{n}{GetNextJob}\PYG{p}{();}
                        \PYG{n}{job} \PYG{p}{=} \PYG{n}{obj}\PYG{p}{;}
                        \PYG{n}{queue}\PYG{p}{.}\PYG{n}{Remove}\PYG{p}{(}\PYG{n}{obj}\PYG{p}{);}
                        \PYG{k}{if} \PYG{p}{(}\PYG{n}{IsCompleted}\PYG{p}{)}
                        \PYG{p}{\PYGZob{}}
                            \PYG{n}{Finished}\PYG{p}{();}
                        \PYG{p}{\PYGZcb{}}
                        \PYG{k}{return} \PYG{k}{true}\PYG{p}{;}

                    \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{}}
            \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// Fetches next job}
        \PYG{c+c1}{/// always returns first element}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{protected} \PYG{k}{virtual} \PYG{n}{IJob} \PYG{n+nf}{GetNextJob}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{lock} \PYG{p}{(}\PYG{n}{queue}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{return} \PYG{n}{queue}\PYG{p}{.}\PYG{n}{First}\PYG{p}{();}
            \PYG{p}{\PYGZcb{}}
            
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// Marks the queue as completed}
        \PYG{c+c1}{/// Checks if all elements are processed}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{override} \PYG{k}{void} \PYG{n+nf}{CompleteAdding}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{base}\PYG{p}{.}\PYG{n}{CompleteAdding}\PYG{p}{();}
            \PYG{k}{if} \PYG{p}{(}\PYG{n}{IsCompleted}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{Finished}\PYG{p}{();}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// Cleans the resources and}
        \PYG{c+c1}{/// cancels waiting consumers}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{k}{private} \PYG{k}{void} \PYG{n+nf}{Finished}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{n}{cancellationTokenSource}\PYG{p}{.}\PYG{n}{Cancel}\PYG{p}{();}
        \PYG{p}{\PYGZcb{}}


        \PYG{c+c1}{// Dispose() calls Dispose(true)}
        \PYG{k}{public} \PYG{k}{void} \PYG{n+nf}{Dispose}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{n}{Dispose}\PYG{p}{(}\PYG{k}{true}\PYG{p}{);}
            \PYG{n}{GC}\PYG{p}{.}\PYG{n}{SuppressFinalize}\PYG{p}{(}\PYG{k}{this}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
        
        \PYG{c+c1}{// The bulk of the clean\PYGZhy{}up code is implemented in Dispose(bool)}
        \PYG{k}{protected} \PYG{k}{virtual} \PYG{k}{void} \PYG{n+nf}{Dispose}\PYG{p}{(}\PYG{k+kt}{bool} \PYG{n}{disposing}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{if} \PYG{p}{(}\PYG{n}{disposing}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{syncSemaphore}\PYG{p}{.}\PYG{n}{Dispose}\PYG{p}{();}
                \PYG{n}{cancellationTokenSource}\PYG{p}{.}\PYG{n}{Dispose}\PYG{p}{();}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

\PYG{p}{\PYGZcb{}}
\end{Verbatim}
