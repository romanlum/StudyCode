package swe4.dal;

import java.sql.*;
import java.util.*;

public class PersonDaoJdbc implements PersonDao {

	private Connection con;
	private String conString;
	private String userName;
	private String password;
	
	
	public PersonDaoJdbc(String conString, String userName, String password) {
		this.conString = conString;
		this.userName = userName;
		this.password = password;
	}
	
	public Connection getConnection() throws DataAccessException {
		try
		{
			if(con == null) {
				con = DriverManager.getConnection(conString, userName, password);
			}
			return con;
		}
		catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
	}

	@Override
	public void close() throws Exception {
		try{
			if(con != null)
				con.close();
			con = null;
		} catch (SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
		
	}

	@Override
	public int getCount() throws DataAccessException {
		int count = 0;
		try(Statement stmt = getConnection().createStatement()) {
			ResultSet rs = stmt.executeQuery("select count(id) from Person"); 
			if(rs.next()) {
				count = rs.getInt(1);
			}
			return count;
			
		}catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
	}
	
	private Collection<Person> getPersonFromWhere(String query, Object... args) throws DataAccessException {
		Collection<Person> c = new ArrayList<Person>();
		try(PreparedStatement pstmt = getConnection()
				.prepareStatement("Select * from Person "+query))
		{
			for(int i = 0; i< args.length;i++) {
				pstmt.setObject(i+1, args[i]);
			}
			try(ResultSet rs = pstmt.executeQuery()) {
				while(rs.next()) {
					c.add(new Person(
							rs.getInt("id"),
							rs.getString("first_name"),
							rs.getString("last_name"),
							rs.getString("address"),
							rs.getString("phone_number")));
				}
			}
			return c;
			
		}catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
	}

	@Override
	public Person get(int id) throws DataAccessException {
		Collection<Person> c = getPersonFromWhere("where id = ?", id);
		return c.stream().findFirst().orElse(null);
	}

	@Override
	public Collection<Person> getAll() throws DataAccessException {
		return getPersonFromWhere("");
		
	}

	@Override
	public Collection<Person> get(String lastName) throws DataAccessException {
		return getPersonFromWhere("WHERE last_name LIKE ?",lastName);
	}

	@Override
	public void delete(int id) throws DataAccessException {
		try(PreparedStatement pstmt = getConnection()
				.prepareStatement("DELETE FROM Person where id = ?")) {
			pstmt.setInt(1,id);
			pstmt.executeUpdate();
		}
		catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
		
	}

	@Override
	public void store(Person p) throws DataAccessException {
		if(p.getId() != -1) {
			throw new DataAccessException("Person cannot be stored twice");
		}
		try(PreparedStatement stmt = getConnection()
				.prepareStatement("insert into Person (first_name, last_name, address, phone_number) VALUES(?,?,?,?)",Statement.RETURN_GENERATED_KEYS)) {
			stmt.setString(1, p.getFirstName());
			stmt.setString(2, p.getLastName());
			stmt.setString(3, p.getAddress());
			stmt.setString(4, p.getPhoneNumber());
			stmt.executeUpdate();
			
			try(ResultSet rs = stmt.getGeneratedKeys()) {
				if(rs!=null && rs.next()) {
					p.setId(rs.getInt(1));
				} else {
					throw new DataAccessException("Autogenerated keys are not supported by db");
				}
			}
			
		}
		catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
	}

	@Override
	public void update(Person p) throws DataAccessException {
		if(p.getId() == -1) {
			throw new DataAccessException("Person not in db");
		}
		try(PreparedStatement stmt = getConnection()
				.prepareStatement("update Person set first_name=?, last_name=?, address=?, phone_number=? where id = ?"))
		{
	
			stmt.setString(1, p.getFirstName());
			stmt.setString(2, p.getLastName());
			stmt.setString(3, p.getAddress());
			stmt.setString(4, p.getPhoneNumber());
			stmt.setInt(5,p.getId());
			stmt.executeUpdate();
			
		}
		catch(SQLException ex) {
			throw new DataAccessException(ex.getMessage());
		}
		
	}

 

} // PersonDaoJdbc