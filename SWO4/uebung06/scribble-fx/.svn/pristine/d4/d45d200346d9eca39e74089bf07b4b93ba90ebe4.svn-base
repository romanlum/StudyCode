package swe4.gui;

import java.util.logging.LogManager;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ScribbleFX extends Application {

//  private static final Border DEFAULT_BORDER = new Border(new BorderStroke(Color.DIMGREY, BorderStrokeStyle.SOLID, null, null));
//  private static final Background CANVAS_BACKGROUND = new Background(new BackgroundFill(Color.CORNSILK, null, null));
  
  private Button leftButton, rightButton, upButton, downButton;
  private ColorPicker colorPicker;
  private ScribbleCanvas canvas;
  
  private ListView<String> messageList;
  private ObservableList<String> messages = FXCollections.observableArrayList();
 
  @SuppressWarnings("unused")
  private class ButtonEventHandler implements EventHandler<ActionEvent> {

    @Override
    public void handle(ActionEvent event) {
      // Usually one would implement the handle method here. We delegate to the outer
      // class to prevent code duplication.
      ScribbleFX.this.handleButtonEvent(event);
    }  
  }
  
  private class KeyEventHandler implements EventHandler<KeyEvent> {
    @Override
    public void handle(KeyEvent event) {
      appendMessage("Key " + event.getCode() + " pressed.");

      switch (event.getCode()) {
      case UP:
        canvas.addLineSegment(Direction.UP);
        event.consume(); // consume event to make it unavailable for
                         // focus traversal
        break;
      case DOWN:
        canvas.addLineSegment(Direction.DOWN);
        event.consume();
        break;
      case LEFT:
        canvas.addLineSegment(Direction.LEFT);
        event.consume();
        break;
      case RIGHT:
        canvas.addLineSegment(Direction.RIGHT);
        event.consume();
        break;
      default:
      }
    }
  }
  
  private ListView<String> createMessageList() {
    messageList = new ListView<String>();
    messageList.setItems(messages);

    messageList.setId("message-list");
    HBox.setHgrow(messageList, Priority.ALWAYS); // messageList will get remaining space in HBox. 
    // styling:
    // messageList.setPrefHeight(190);
    // messageList.setBorder(DEFAULT_BORDER);
    
    return messageList;
  }

  private void appendMessage(String message) {
    messages.add(message);
    messageList.scrollTo(messages.size());
  }
  
  private MenuBar createMenuBar(Stage stage) {
    PreferencesDialog prefDialog = new PreferencesDialog(stage); 
    
    MenuItem prefItem = new MenuItem("Preferences ...");
    prefItem.setOnAction(event -> prefDialog.show());
    
    Menu settingsMenu = new Menu("Settings");
    settingsMenu.getItems().add(prefItem);
    
    MenuBar menuBar = new MenuBar();    
    menuBar.getMenus().add(settingsMenu);
    
    return menuBar;
  }

  @SuppressWarnings("unused")
  private Button createTextButton(String id, String caption) {
    Button button = new Button(caption);
    button.setId(id);
    button.setPadding(new Insets(5));
    button.setPrefSize(50, 40);
    return button;
  }

  private Button createIconButton(String id, String iconFile) {
    Button button = new Button();
    button.setId(id);
    
    // styling
    // button.setPadding(new Insets(5));
    // Image icon = new Image(getClass().getResourceAsStream(iconFile));
    // button.setGraphic(new ImageView(icon));
        
    return button;
  }

  private Pane createControlPane() {
    // styling: can be done in code, but is better placed in style sheet.
    // buttonPane.setAlignment(Pos.CENTER);
    
    // variant 1: string based buttons
    // leftButton = createTextButton("left-button", "Left", buttonHandler);
    
    // variant 2: icon based buttons
    leftButton = createIconButton("left-button", "css/left-button.png");
    upButton = createIconButton("up-button", "css/up-button.png");
    rightButton = createIconButton("right-button", "css/right-button.png");
    downButton = createIconButton("down-button", "css/down-button.png");
    
    GridPane buttonPane = new GridPane();
    buttonPane.setId("button-pane");
    
    buttonPane.add(leftButton, 0, 1);
    buttonPane.add(upButton, 1, 0);
    buttonPane.add(rightButton, 2, 1);
    buttonPane.add(downButton, 1, 2);

    //
    // create event handler using different techniques
    //
    
    // variant 1: register handler directly on buttons (event target).
    // EventHandler<ActionEvent> handler = new ButtonEventHandler();
    // // leftButton.setOnAction(handler);
    // leftButton.addEventHandler(ActionEvent.ACTION, handler);
    // rightButton.addEventHandler(ActionEvent.ACTION, handler);
    // upButton.addEventHandler(ActionEvent.ACTION, handler);
    // downButton.addEventHandler(ActionEvent.ACTION, handler);
    
    // variant 2: register handler on buttons' parent container
    // buttonPane.addEventHandler(ActionEvent.ACTION, new ButtonEventHandler());
    
    // variant 3: implement handler as anonymous class
    // buttonPane.addEventHandler(ActionEvent.ACTION, new EventHandler<ActionEvent>() {
    //  @Override
    //  public void handle(ActionEvent event) {
    //    ScribbleFX.this.handleButtonEvent(event);
    //  }
    // });

    // variant 4: implement handler as lambda expression 
    //            (type for parameter event can be omitted).
    buttonPane.addEventHandler(ActionEvent.ACTION, 
      (ActionEvent event) -> ScribbleFX.this.handleButtonEvent(event));
    
    Label colorLabel = new Label("Color: ");
    colorPicker = new ColorPicker();
    colorPicker.setOnAction(new EventHandler<ActionEvent>() {
      public void handle(ActionEvent event) {
        appendMessage("Color '" + colorPicker.getValue() + "' selected.");
        canvas.setLineColor(colorPicker.getValue());
      }
    });
    
    HBox colorPane = new HBox(colorLabel, colorPicker);
    colorPane.setId("color-pane");
    // styling:
    // colorBox.setSpacing(5);
    // colorBox.setAlignment(Pos.CENTER);
    // colorBox.setPadding(new Insets(10, 0, 0, 0));

    VBox controlPane = new VBox();    
    controlPane.setId("control-pane"); 
    controlPane.getChildren().addAll(buttonPane, colorPane);
    // styling:
    // controlPane.setPadding(new Insets(10));
    // controlPane.setBorder(DEFAULT_BORDER);
    // easier but not type safe
    // controlPane.setStyle("-fx-border-color: dimgrey;");

    return controlPane;
  }
  
  private ScribbleCanvas createCanvas() {
    ScribbleCanvas canvas = new ScribbleCanvas();
    canvas.setId("canvas");
    VBox.setVgrow(canvas, Priority.ALWAYS);
    VBox.setMargin(canvas, new Insets(0, 10, 10, 10));
    // styling:
    // canvas.setBackground(CANVAS_BACKGROUND);
    // canvas.setBorder(DEFAULT_BORDER);
    
    canvas.setOnMouseClicked(h -> {
      Point2D p = new Point2D(h.getX(), h.getY());
      appendMessage("Mouse click at " + p + ".");
      canvas.addLineSegment(p);
    });

    return canvas;
  }
  
  @Override
  // life cycle method called by the runtime
  // Stage is the top level element constructed by the runtime
  public void start(Stage primaryStage) {
    try {
      Pane controlPane = createControlPane();      
      messageList = createMessageList();      
      canvas = createCanvas();
      colorPicker.setValue(canvas.getLineColor());

      HBox topPane = new HBox(controlPane, messageList);
      topPane.setId("top-pane");
      // styling:
      // topPane.setSpacing(10);
      // topPane.setPadding(new Insets(10));

      VBox rootPane = new VBox(createMenuBar(primaryStage), topPane, canvas);
      rootPane.setId("root-pane");
      rootPane.setOnKeyPressed(new KeyEventHandler());
      
      Scene scene = new Scene(rootPane, 500, 500);
      // toExternalForm determines absolute path of style sheet.
      scene.getStylesheets().add(getClass().getResource("css/scribble-fx.css")
                                           .toExternalForm());
      
      primaryStage.setScene(scene);
      primaryStage.setMinWidth(400);
      primaryStage.setMinHeight(400);
      primaryStage.setTitle("ScribbleFX");
      primaryStage.show();
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
  
  public void handleButtonEvent(ActionEvent event) {
    if (event.getTarget() instanceof Button) {
      Button button = (Button)event.getTarget();
      appendMessage("Button '" + button.getId() + "' pressed.");
      
      if (button == upButton)
        canvas.addLineSegment(Direction.UP);
      else if (button == downButton)
        canvas.addLineSegment(Direction.DOWN);
      else if (button == leftButton)
        canvas.addLineSegment(Direction.LEFT);
      else if (button == rightButton)
        canvas.addLineSegment(Direction.RIGHT);
    }
  }

  public static void main(String[] args) {
    LogManager.getLogManager().reset(); // turn off JDK logging
    launch(args);
  }

}
